*gemini.nvim*    Google's Gemini neovim binding

INTRODUCTION                                    *gemini.nvim-intro*

This plugin try to interface Google's Gemini API into neovim.



INSTALLATION                                    *gemini.nvim-install*

install curl

sudo apt install curl

setup API key

export GEMINI_API_KEY="<your API key here>"

lazy.nvim:

{
  'kiddos/gemini.nvim',
  opts = {}
}



CONFIGURATION                                    *gemini.nvim-config*

Default settings:
```lua
{
  model_config = {
    model_id = "gemini-2.0-flash", -- See `lua/gemini/api.lua` for M.MODELS
    temperature = 0.1,
    top_k = 128,
    response_mime_type = 'text/plain',
  },
  chat_config = {
    enabled = true,
  },
  hints = {
    enabled = true,
    hints_delay = 2000,
    insert_result_key = '<S-Tab>',
    get_prompt = function(node, bufnr)
      -- Default prompt function for hints
    end
  },
  completion = {
    enabled = true,
    blacklist_filetypes = { 'help', 'qf', 'json', 'yaml', 'toml', 'xml' },
    blacklist_filenames = { '.env' },
    completion_delay = 1000,
    insert_result_key = '<S-Tab>',
    move_cursor_end = true,
    can_complete = function()
      return vim.fn.pumvisible() ~= 1
    end,
    get_system_text = function()
      -- Default system text for completion
    end,
    get_prompt = function(bufnr, pos)
      -- Default prompt function for completion
    end
  },
  instruction = {
    enabled = true,
    menu_key = '<Leader><Leader><Leader>g',
    prompts = {
      -- Default instruction prompts (Unit Test, Code Review, Code Explain)
    }
  },
  task = {
    enabled = true,
    get_system_text = function()
      -- Default system text for task
    end,
    get_prompt = function(bufnr, user_prompt)
      -- Default prompt function for task
    end
  },
  logging = {
    -- Path to the log file. If nil, file logging is disabled.
    -- Example: file_path = vim.fn.stdpath('cache') .. '/gemini.nvim.log'
    file_path = nil,
    -- Log level for the file. Uses vim.log.levels.
    -- (ERROR, WARN, INFO, DEBUG, TRACE)
    level = vim.log.levels.INFO,
  }
}
```

For detailed default prompt implementations, please refer to `lua/gemini/config.lua`.

To enable file logging, you can set `logging.file_path` in your setup options:
```lua
require('gemini').setup({
  logging = {
    file_path = vim.fn.stdpath('cache') .. '/gemini.nvim.log',
    level = vim.log.levels.DEBUG, -- Log DEBUG messages and above
  }
})
```


COMMANDS                                                     *gemini.nvim-commands*

:GeminiTask {user_prompt}
                        Ask Gemini to complete some task. This would use
                        current opened buffer as context. This would also
                        open up a diff pane in the current window.

:GeminiApply            Apply the diff result from |:GeminiTask|.

:GeminiChat {user_prompt}
                        Ask Gemini to do something. This doesn't use any
                        context.

:GeminiCodeExplain      (Visually select code first) Ask Gemini what the
                        selected code does.

:GeminiCodeReview       (Visually select code first) Ask Gemini to perform a
                        code review on the selected code.

:GeminiUnitTest         (Visually select code first) Ask Gemini to write unit
                        tests for the selected code.

:GeminiFunctionHint     Show a quick hint/documentation for the function
                        under the cursor.

:GeminiOpenLogs         Open the gemini.nvim log file in a new vertical split.
                        This requires `logging.file_path` to be configured in
                        the setup options.


MAPPINGS                                                     *gemini.nvim-mappings*

<leader><leader><leader>g
                        (Normal mode) Open a popup menu to select instruction
                        tasks (e.g., Code Explain, Code Review, Unit Test).

<S-Tab>                 (Insert mode) Confirm and insert Gemini's
                        autocomplete suggestion.

<S-Tab>                 (Normal mode, for Hints) Insert the displayed hint
                        content into the buffer at the hint's original
                        location.
